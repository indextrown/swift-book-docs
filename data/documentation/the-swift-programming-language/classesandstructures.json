{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"type":"paragraph"},{"inlineContent":[{"text":"Unlike other programming languages,","type":"text"},{"text":" ","type":"text"},{"text":"Swift doesn’t require you to create separate interface and implementation files","type":"text"},{"text":" ","type":"text"},{"text":"for custom structures and classes.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift, you define a structure or class in a single file,","type":"text"},{"text":" ","type":"text"},{"text":"and the external interface to that class or structure is","type":"text"},{"text":" ","type":"text"},{"text":"automatically made available for other code to use.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"object"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"type":"text","text":" "},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"type":"text","text":"and much of this chapter describes functionality that applies to"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"emphasis","inlineContent":[{"text":"either","type":"text"}]},{"type":"text","text":" a class or a structure type."},{"type":"text","text":" "},{"type":"text","text":"Because of this, the more general term "},{"type":"emphasis","inlineContent":[{"type":"text","text":"instance"}]},{"type":"text","text":" is used."}]}],"type":"aside","name":"Note"},{"text":"Comparing Structures and Classes","level":2,"type":"heading","anchor":"Comparing-Structures-and-Classes"},{"inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"type":"text","text":" "},{"type":"text","text":"Both can:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Define properties to store values"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Define methods to provide functionality"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Define subscripts to provide access to their values using subscript syntax","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Be extended to expand their functionality beyond a default implementation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"type":"text","text":", and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Classes have additional capabilities that structures don’t have:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Inheritance enables one class to inherit the characteristics of another.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Type casting enables you to check and interpret the type of a class instance at runtime.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Deinitializers enable an instance of a class to free up any resources it has assigned."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The additional capabilities that classes support","type":"text"},{"text":" ","type":"text"},{"text":"come at the cost of increased complexity.","type":"text"},{"text":" ","type":"text"},{"text":"As a general guideline,","type":"text"},{"text":" ","type":"text"},{"text":"prefer structures because they’re easier to reason about,","type":"text"},{"text":" ","type":"text"},{"text":"and use classes when they’re appropriate or necessary.","type":"text"},{"text":" ","type":"text"},{"text":"In practice, this means most of the custom types you define","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will be structures and enumerations."},{"type":"text","text":" "},{"type":"text","text":"For a more detailed comparison,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","isActive":true},{"type":"text","text":"."}]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Classes and actors share many of the same characteristics and behaviors."},{"type":"text","text":" "},{"type":"text","text":"For information about actors, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"anchor":"Definition-Syntax","text":"Definition Syntax","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"type":"text","text":" "},{"type":"text","text":"You introduce structures with the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and classes with the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Both place their entire definition within a pair of braces:"}]},{"syntax":"swift","type":"codeListing","code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"type":"text","text":" "},{"type":"text","text":"you define a new Swift type."},{"type":"text","text":" "},{"type":"text","text":"Give types "},{"type":"codeVoice","code":"UpperCamelCase"},{"type":"text","text":" names"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":" here)"},{"type":"text","text":" "},{"type":"text","text":"to match the capitalization of standard Swift types"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Give properties and methods "},{"type":"codeVoice","code":"lowerCamelCase"},{"type":"text","text":" names"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" and "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to differentiate them from type names."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of a structure definition and a class definition:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a new structure called "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"to describe a pixel-based display resolution.","type":"text"},{"text":" ","type":"text"},{"text":"This structure has two stored properties called ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"height"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Stored properties are constants or variables that are bundled up and stored","type":"text"},{"text":" ","type":"text"},{"text":"as part of the structure or class.","type":"text"},{"text":" ","type":"text"},{"text":"These two properties are inferred to be of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" ","type":"text"},{"text":"by setting them to an initial integer value of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a specific video mode for video display."},{"type":"text","text":" "},{"type":"text","text":"This class has four variable stored properties."},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"code":"resolution","type":"codeVoice"},{"type":"text","text":", is initialized with a new "},{"code":"Resolution","type":"codeVoice"},{"text":" structure instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which infers a property type of "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For the other three properties,"},{"type":"text","text":" "},{"text":"new ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" instances will be initialized with","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"interlaced","type":"codeVoice"},{"type":"text","text":" setting of "},{"code":"false","type":"codeVoice"},{"type":"text","text":" (meaning “noninterlaced video”),"},{"type":"text","text":" "},{"type":"text","text":"a playback frame rate of "},{"type":"codeVoice","code":"0.0"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"type":"codeVoice","code":"name"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property is automatically given a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “no "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value”, because it’s of an optional type."}]},{"text":"Structure and Class Instances","level":3,"type":"heading","anchor":"Structure-and-Class-Instances"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":" structure definition and the ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" class definition","type":"text"},{"text":" ","type":"text"},{"text":"only describe what a ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" will look like.","type":"text"},{"text":" ","type":"text"},{"text":"They themselves don’t describe a specific resolution or video mode.","type":"text"},{"text":" ","type":"text"},{"text":"To do that, you need to create an instance of the structure or class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax for creating instances is very similar for both structures and classes:"}]},{"type":"codeListing","code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Structures and classes both use initializer syntax for new instances.","type":"text"},{"text":" ","type":"text"},{"text":"The simplest form of initializer syntax uses the type name of the class or structure","type":"text"},{"text":" ","type":"text"},{"text":"followed by empty parentheses, such as ","type":"text"},{"type":"codeVoice","code":"Resolution()"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"VideoMode()"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This creates a new instance of the class or structure,","type":"text"},{"text":" ","type":"text"},{"text":"with any properties initialized to their default values.","type":"text"},{"text":" ","type":"text"},{"text":"Class and structure initialization is described in more detail","type":"text"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"heading","level":3,"anchor":"Accessing-Properties","text":"Accessing Properties"},{"type":"paragraph","inlineContent":[{"text":"You can access the properties of an instance using ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot syntax"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"In dot syntax, you write the property name immediately after the instance name,","type":"text"},{"text":" ","type":"text"},{"text":"separated by a period (","type":"text"},{"type":"codeVoice","code":"."},{"text":"), without any spaces:","type":"text"}]},{"type":"codeListing","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"code":"someResolution.width","type":"codeVoice"},{"text":" refers to the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of ","type":"text"},{"code":"someResolution","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and returns its default initial value of ","type":"text"},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can drill down into subproperties,"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"code":"width","type":"codeVoice"},{"type":"text","text":" property in the "},{"code":"resolution","type":"codeVoice"},{"type":"text","text":" property of a "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""]},{"inlineContent":[{"text":"You can also use dot syntax to assign a new value to a variable property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""]},{"anchor":"Memberwise-Initializers-for-Structure-Types","level":3,"text":"Memberwise Initializers for Structure Types","type":"heading"},{"inlineContent":[{"text":"All structures have an automatically generated ","type":"text"},{"inlineContent":[{"type":"text","text":"memberwise initializer"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which you can use to initialize the member properties of new structure instances.","type":"text"},{"text":" ","type":"text"},{"text":"Initial values for the properties of the new instance","type":"text"},{"text":" ","type":"text"},{"text":"can be passed to the memberwise initializer by name:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let vga = Resolution(width: 640, height: 480)"]},{"inlineContent":[{"type":"text","text":"Unlike structures, class instances don’t receive a default memberwise initializer."},{"type":"text","text":" "},{"type":"text","text":"Initializers are described in more detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Structures-and-Enumerations-Are-Value-Types","level":2,"text":"Structures and Enumerations Are Value Types","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"value type","type":"text"}],"type":"emphasis"},{"text":" is a type whose value is ","type":"text"},{"inlineContent":[{"text":"copied","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"when it’s assigned to a variable or constant,","type":"text"},{"text":" ","type":"text"},{"text":"or when it’s passed to a function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You’ve actually been using value types extensively throughout the previous chapters."},{"type":"text","text":" "},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"type":"text","text":" "},{"type":"text","text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —"},{"type":"text","text":" "},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}],"type":"paragraph"},{"inlineContent":[{"text":"All structures and enumerations are value types in Swift.","type":"text"},{"text":" ","type":"text"},{"text":"This means that any structure and enumeration instances you create —","type":"text"},{"text":" ","type":"text"},{"text":"and any value types they have as properties —","type":"text"},{"text":" ","type":"text"},{"text":"are always copied when they’re passed around in your code.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Collections defined by the Swift standard library"},{"type":"text","text":" "},{"type":"text","text":"like arrays, dictionaries, and strings"},{"type":"text","text":" "},{"type":"text","text":"use an optimization to reduce the performance cost of copying."},{"type":"text","text":" "},{"type":"text","text":"Instead of making a copy immediately,"},{"type":"text","text":" "},{"type":"text","text":"these collections share the memory where the elements are stored"},{"type":"text","text":" "},{"type":"text","text":"between the original instance and any copies."},{"type":"text","text":" "},{"type":"text","text":"If one of the copies of the collection is modified,"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"type":"text","text":" "},{"type":"text","text":"The behavior you see in your code"},{"type":"text","text":" "},{"type":"text","text":"is always as if a copy took place immediately."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Consider this example, which uses the "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure from the previous example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"]},{"inlineContent":[{"text":"This example declares a constant called ","type":"text"},{"type":"codeVoice","code":"hd"},{"text":" ","type":"text"},{"text":"and sets it to a ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"text":" instance initialized with","type":"text"},{"text":" ","type":"text"},{"text":"the width and height of full HD video","type":"text"},{"text":" ","type":"text"},{"text":"(1920 pixels wide by 1080 pixels high).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"It then declares a variable called ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and sets it to the current value of ","type":"text"},{"code":"hd","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" is a structure,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"type":"text","text":" of the existing instance is made,"},{"type":"text","text":" "},{"type":"text","text":"and this new copy is assigned to "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Even though "},{"code":"hd","type":"codeVoice"},{"type":"text","text":" and "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" now have the same width and height,"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}],"type":"paragraph"},{"inlineContent":[{"text":"Next, the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" is amended to be","type":"text"},{"text":" ","type":"text"},{"text":"the width of the slightly wider 2K standard used for digital cinema projection","type":"text"},{"text":" ","type":"text"},{"text":"(2048 pixels wide and 1080 pixels high):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["cinema.width = 2048"]},{"inlineContent":[{"text":"Checking the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" ","type":"text"},{"text":"shows that it has indeed changed to be ","type":"text"},{"code":"2048","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""]},{"inlineContent":[{"text":"However, the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of the original ","type":"text"},{"code":"hd","type":"codeVoice"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"text":"still has the old value of ","type":"text"},{"code":"1920","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""]},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" was given the current value of "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"values"}]},{"type":"text","text":" stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" were copied into the new "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The end result was two completely separate instances"},{"type":"text","text":" "},{"type":"text","text":"that contained the same numeric values."},{"type":"text","text":" "},{"type":"text","text":"However, because they’re separate instances,"},{"type":"text","text":" "},{"type":"text","text":"setting the width of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" to "},{"type":"codeVoice","code":"2048"},{"type":"text","text":" "},{"type":"text","text":"doesn’t affect the width stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"sharedStateStruct"}],"type":"paragraph"},{"inlineContent":[{"text":"The same behavior applies to enumerations:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""]},{"inlineContent":[{"text":"When ","type":"text"},{"code":"rememberedDirection","type":"codeVoice"},{"text":" is assigned the value of ","type":"text"},{"code":"currentDirection","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"it’s actually set to a copy of that value.","type":"text"},{"text":" ","type":"text"},{"text":"Changing the value of ","type":"text"},{"code":"currentDirection","type":"codeVoice"},{"text":" thereafter doesn’t affect","type":"text"},{"text":" ","type":"text"},{"text":"the copy of the original value that was stored in ","type":"text"},{"code":"rememberedDirection","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Classes-Are-Reference-Types","level":2,"text":"Classes Are Reference Types","type":"heading"},{"inlineContent":[{"type":"text","text":"Unlike value types, "},{"inlineContent":[{"type":"text","text":"reference types"}],"type":"emphasis"},{"type":"text","text":" are "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" copied"},{"type":"text","text":" "},{"type":"text","text":"when they’re assigned to a variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"or when they’re passed to a function."},{"type":"text","text":" "},{"type":"text","text":"Rather than a copy, a reference to the same existing instance is used."}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example, using the ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" class defined above:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"]},{"inlineContent":[{"text":"This example declares a new constant called ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and sets it to refer to a new instance of the ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"The video mode is assigned a copy of the HD resolution of ","type":"text"},{"code":"1920","type":"codeVoice"},{"text":" by ","type":"text"},{"code":"1080","type":"codeVoice"},{"text":" from before.","type":"text"},{"text":" ","type":"text"},{"text":"It’s set to be interlaced,","type":"text"},{"text":" ","type":"text"},{"text":"its name is set to ","type":"text"},{"code":"\"1080i\"","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and its frame rate is set to ","type":"text"},{"code":"25.0","type":"codeVoice"},{"text":" frames per second.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next, "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" is assigned to a new constant, called "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the frame rate of "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" is modified:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"]},{"inlineContent":[{"text":"Because classes are reference types,","type":"text"},{"text":" ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" actually both refer to the ","type":"text"},{"inlineContent":[{"type":"text","text":"same"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"text":"Effectively, they’re just two different names for the same single instance,","type":"text"},{"text":" ","type":"text"},{"text":"as shown in the figure below:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"sharedStateClass"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Checking the "},{"code":"frameRate","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"shows that it correctly reports the new frame rate of "},{"code":"30.0","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"from the underlying "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""]},{"inlineContent":[{"text":"This example also shows how reference types can be harder to reason about.","type":"text"},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" were far apart in your program’s code,","type":"text"},{"text":" ","type":"text"},{"text":"it could be difficult to find all the ways that the video mode is changed.","type":"text"},{"text":" ","type":"text"},{"text":"Wherever you use ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"you also have to think about the code that uses ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and vice versa.","type":"text"},{"text":" ","type":"text"},{"text":"In contrast, value types are easier to reason about","type":"text"},{"text":" ","type":"text"},{"text":"because all of the code that interacts with the same value","type":"text"},{"text":" ","type":"text"},{"text":"is close together in your source files.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" are declared as "},{"inlineContent":[{"type":"text","text":"constants"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rather than variables."},{"type":"text","text":" "},{"type":"text","text":"However, you can still change "},{"type":"codeVoice","code":"tenEighty.frameRate"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty.frameRate"},{"type":"text","text":" because"},{"type":"text","text":" "},{"type":"text","text":"the values of the "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" constants themselves don’t actually change."},{"type":"text","text":" "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" themselves don’t “store” the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance —"},{"type":"text","text":" "},{"type":"text","text":"instead, they both "},{"inlineContent":[{"type":"text","text":"refer"}],"type":"emphasis"},{"type":"text","text":" to a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"It’s the "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" that’s changed,"},{"type":"text","text":" "},{"type":"text","text":"not the values of the constant references to that "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Identity-Operators","level":3,"text":"Identity Operators","type":"heading"},{"inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"type":"text","text":"it’s possible for multiple constants and variables to refer to"},{"type":"text","text":" "},{"type":"text","text":"the same single instance of a class behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"(The same isn’t true for structures and enumerations,"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"or passed to a function.)"}],"type":"paragraph"},{"inlineContent":[{"text":"It can sometimes be useful to find out whether two constants or variables refer to","type":"text"},{"text":" ","type":"text"},{"text":"exactly the same instance of a class.","type":"text"},{"text":" ","type":"text"},{"text":"To enable this, Swift provides two identity operators:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Identical to ("},{"code":"===","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Not identical to (","type":"text"},{"code":"!==","type":"codeVoice"},{"text":")","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Use these operators to check whether two constants or variables refer to the same single instance:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""]},{"inlineContent":[{"type":"text","text":"Note that "},{"type":"emphasis","inlineContent":[{"text":"identical to","type":"text"}]},{"type":"text","text":" (represented by three equal signs, or "},{"type":"codeVoice","code":"==="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"doesn’t mean the same thing as "},{"type":"emphasis","inlineContent":[{"text":"equal to","type":"text"}]},{"type":"text","text":" (represented by two equal signs, or "},{"type":"codeVoice","code":"=="},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Identical to"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"type":"text","text":"two constants or variables of class type refer to exactly the same class instance."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"Equal to","type":"text"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"type":"text","text":"two instances are considered equal or equivalent in value,"},{"type":"text","text":" "},{"type":"text","text":"for some appropriate meaning of "},{"type":"emphasis","inlineContent":[{"text":"equal","type":"text"}]},{"type":"text","text":", as defined by the type’s designer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you define your own custom structures and classes,"},{"type":"text","text":" "},{"type":"text","text":"it’s your responsibility to decide what qualifies as two instances being equal."},{"type":"text","text":" "},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" and "},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"type":"text","text":" "},{"type":"text","text":"is described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Pointers","level":3,"text":"Pointers","type":"heading"},{"inlineContent":[{"text":"If you have experience with C, C++, or Objective-C,","type":"text"},{"text":" ","type":"text"},{"text":"you may know that these languages use ","type":"text"},{"inlineContent":[{"text":"pointers","type":"text"}],"type":"emphasis"},{"text":" to refer to addresses in memory.","type":"text"},{"text":" ","type":"text"},{"text":"A Swift constant or variable that refers to an instance of some reference type","type":"text"},{"text":" ","type":"text"},{"text":"is similar to a pointer in C,","type":"text"},{"text":" ","type":"text"},{"text":"but isn’t a direct pointer to an address in memory,","type":"text"},{"text":" ","type":"text"},{"text":"and doesn’t require you to write an asterisk (","type":"text"},{"code":"*","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"to indicate that you are creating a reference.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, these references are defined like any other constant or variable in Swift.","type":"text"},{"text":" ","type":"text"},{"text":"The Swift standard library provides pointer and buffer types","type":"text"},{"text":" ","type":"text"},{"text":"that you can use if you need to interact with pointers directly —","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","name":"Beta Software","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Learn more about using ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}]}],"metadata":{"title":"Structures and Classes","role":"article"},"abstract":[{"text":"Model custom types that encapsulate data.","type":"text"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"kind":"article","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/typecasting","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","title":"Type Casting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"kind":"article","abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","url":"\/documentation\/the-swift-programming-language\/methods","role":"article","type":"topic","title":"Methods"},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","title":"Manual Memory Management","type":"link","titleInlineContent":[{"type":"text","text":"Manual Memory Management"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"url":"\/documentation\/the-swift-programming-language\/concurrency","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"title":"Concurrency","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","type":"topic","role":"article","kind":"article"},"https://developer.apple.com/support/beta-software/":{"url":"https:\/\/developer.apple.com\/support\/beta-software\/","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","title":"Apple’s beta software","type":"link","titleInlineContent":[{"type":"text","text":"Apple’s beta software"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","abstract":[],"title":"Equivalence Operators","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"kind":"article","title":"Subscripts","abstract":[{"text":"Access the elements of a collection.","type":"text"}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","type":"topic","abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","title":"Protocols"},"sharedStateStruct":{"alt":null,"identifier":"sharedStateStruct","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/sharedStateStruct@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/sharedStateStruct~dark@2x.png"}],"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"type":"topic","title":"Deinitialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","url":"\/documentation\/the-swift-programming-language\/deinitialization","abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"kind":"article","role":"article"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","title":"Choosing Between Structures and Classes","type":"link","titleInlineContent":[{"type":"text","text":"Choosing Between Structures and Classes"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"Extensions","url":"\/documentation\/the-swift-programming-language\/extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"role":"article"},"sharedStateClass":{"alt":null,"identifier":"sharedStateClass","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/sharedStateClass@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/sharedStateClass~dark@2x.png"}],"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","title":"The Swift Programming Language (6.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/inheritance","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"url":"\/documentation\/the-swift-programming-language\/initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","role":"article","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"kind":"article","title":"Initialization","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"title":"Properties","type":"topic","role":"article","abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"url":"\/documentation\/the-swift-programming-language\/properties","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"}}}