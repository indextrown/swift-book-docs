{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"sections":[],"metadata":{"role":"article","title":"Methods"},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"type":"text","text":"which are associated with the type itself."},{"type":"text","text":" "},{"type":"text","text":"Type methods are similar to class methods in Objective-C."}],"type":"paragraph"},{"inlineContent":[{"text":"The fact that structures and enumerations can define methods in Swift","type":"text"},{"text":" ","type":"text"},{"text":"is a major difference from C and Objective-C.","type":"text"},{"text":" ","type":"text"},{"text":"In Objective-C, classes are the only types that can define methods.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift, you can choose whether to define a class, structure, or enumeration,","type":"text"},{"text":" ","type":"text"},{"text":"and still have the flexibility to define methods on the type you create.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Instance Methods","type":"heading","anchor":"Instance-Methods"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Instance methods","type":"text"}]},{"text":" are functions that belong to instances of","type":"text"},{"text":" ","type":"text"},{"text":"a particular class, structure, or enumeration.","type":"text"},{"text":" ","type":"text"},{"text":"They support the functionality of those instances,","type":"text"},{"text":" ","type":"text"},{"text":"either by providing ways to access and modify instance properties,","type":"text"},{"text":" ","type":"text"},{"text":"or by providing functionality related to the instance’s purpose.","type":"text"},{"text":" ","type":"text"},{"text":"Instance methods have exactly the same syntax as functions,","type":"text"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You write an instance method within the opening and closing braces of the type it belongs to."},{"type":"text","text":" "},{"type":"text","text":"An instance method has implicit access to all other instance methods and properties of that type."},{"type":"text","text":" "},{"type":"text","text":"An instance method can be called only on a specific instance of the type it belongs to."},{"type":"text","text":" "},{"type":"text","text":"It can’t be called in isolation without an existing instance."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example that defines a simple "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"which can be used to count the number of times an action occurs:"}],"type":"paragraph"},{"code":["class Counter {","    var count = 0","    func increment() {","        count += 1","    }","    func increment(by amount: Int) {","        count += amount","    }","    func reset() {","        count = 0","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class defines three instance methods:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"increment()"},{"type":"text","text":" increments the counter by "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"increment(by: Int)","type":"codeVoice"},{"text":" increments the counter by a specified integer amount.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reset()","type":"codeVoice"},{"text":" resets the counter to zero.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class also declares a variable property, "},{"type":"codeVoice","code":"count"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to keep track of the current counter value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You call instance methods with the same dot syntax as properties:"}],"type":"paragraph"},{"code":["let counter = Counter()","\/\/ the initial counter value is 0","counter.increment()","\/\/ the counter's value is now 1","counter.increment(by: 5)","\/\/ the counter's value is now 6","counter.reset()","\/\/ the counter's value is now 0"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Function parameters can have both a name (for use within the function’s body)","type":"text"},{"text":" ","type":"text"},{"text":"and an argument label (for use when calling the function),","type":"text"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The same is true for method parameters,","type":"text"},{"text":" ","type":"text"},{"text":"because methods are just functions that are associated with a type.","type":"text"}],"type":"paragraph"},{"level":3,"text":"The self Property","type":"heading","anchor":"The-self-Property"},{"inlineContent":[{"text":"Every instance of a type has an implicit property called ","type":"text"},{"code":"self","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is exactly equivalent to the instance itself.","type":"text"},{"text":" ","type":"text"},{"text":"You use the ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" property to refer to the current instance","type":"text"},{"text":" ","type":"text"},{"text":"within its own instance methods.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"increment()","type":"codeVoice"},{"type":"text","text":" method in the example above could have been written like this:"}],"type":"paragraph"},{"code":["func increment() {","    self.count += 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In practice, you don’t need to write "},{"type":"codeVoice","code":"self"},{"type":"text","text":" in your code very often."},{"type":"text","text":" "},{"type":"text","text":"If you don’t explicitly write "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift assumes that you are referring to a property or method of the current instance"},{"type":"text","text":" "},{"type":"text","text":"whenever you use a known property or method name within a method."},{"type":"text","text":" "},{"type":"text","text":"This assumption is demonstrated by the use of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" (rather than "},{"type":"codeVoice","code":"self.count"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"inside the three instance methods for "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The main exception to this rule occurs when a parameter name for an instance method","type":"text"},{"text":" ","type":"text"},{"text":"has the same name as a property of that instance.","type":"text"},{"text":" ","type":"text"},{"text":"In this situation, the parameter name takes precedence,","type":"text"},{"text":" ","type":"text"},{"text":"and it becomes necessary to refer to the property in a more qualified way.","type":"text"},{"text":" ","type":"text"},{"text":"You use the ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" property to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"distinguish between the parameter name and the property name."}],"type":"paragraph"},{"inlineContent":[{"text":"Here, ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" disambiguates between","type":"text"},{"text":" ","type":"text"},{"text":"a method parameter called ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" and an instance property that’s also called ","type":"text"},{"code":"x","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["struct Point {","    var x = 0.0, y = 0.0","    func isToTheRightOf(x: Double) -> Bool {","        return self.x > x","    }","}","let somePoint = Point(x: 4.0, y: 5.0)","if somePoint.isToTheRightOf(x: 1.0) {","    print(\"This point is to the right of the line where x == 1.0\")","}","\/\/ Prints \"This point is to the right of the line where x == 1.0\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Without the "},{"code":"self","type":"codeVoice"},{"type":"text","text":" prefix,"},{"type":"text","text":" "},{"type":"text","text":"Swift would assume that both uses of "},{"code":"x","type":"codeVoice"},{"type":"text","text":" referred to the method parameter called "},{"code":"x","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"Modifying Value Types from Within Instance Methods","type":"heading","anchor":"Modifying-Value-Types-from-Within-Instance-Methods"},{"inlineContent":[{"type":"text","text":"Structures and enumerations are "},{"inlineContent":[{"text":"value types","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default, the properties of a value type can’t be modified from within its instance methods."}],"type":"paragraph"},{"inlineContent":[{"text":"However, if you need to modify the properties of your structure or enumeration","type":"text"},{"text":" ","type":"text"},{"text":"within a particular method,","type":"text"},{"text":" ","type":"text"},{"text":"you can opt in to ","type":"text"},{"inlineContent":[{"type":"text","text":"mutating"}],"type":"emphasis"},{"text":" behavior for that method.","type":"text"},{"text":" ","type":"text"},{"text":"The method can then mutate (that is, change)","type":"text"},{"text":" ","type":"text"},{"text":"its properties from within the method,","type":"text"},{"text":" ","type":"text"},{"text":"and any changes that it makes are written back to the original structure when the method ends.","type":"text"},{"text":" ","type":"text"},{"text":"The method can also assign a completely new instance to its implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" property,","type":"text"},{"text":" ","type":"text"},{"text":"and this new instance will replace the existing one when the method ends.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can opt in to this behavior by placing the "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword for that method:"}],"type":"paragraph"},{"code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        x += deltaX","        y += deltaY","    }","}","var somePoint = Point(x: 1.0, y: 1.0)","somePoint.moveBy(x: 2.0, y: 3.0)","print(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")","\/\/ Prints \"The point is now at (3.0, 4.0)\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" structure above defines a mutating "},{"code":"moveBy(x:y:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which moves a "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" instance by a certain amount."},{"type":"text","text":" "},{"type":"text","text":"Instead of returning a new point,"},{"text":" ","type":"text"},{"text":"this method actually modifies the point on which it’s called.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"mutating","type":"codeVoice"},{"text":" keyword is added to its definition","type":"text"},{"text":" ","type":"text"},{"text":"to enable it to modify its properties.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that you can’t call a mutating method on a constant of structure type,"},{"type":"text","text":" "},{"type":"text","text":"because its properties can’t be changed, even if they’re variable properties,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let fixedPoint = Point(x: 3.0, y: 3.0)","fixedPoint.moveBy(x: 2.0, y: 3.0)","\/\/ this will report an error"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Assigning to self Within a Mutating Method","type":"heading","anchor":"Assigning-to-self-Within-a-Mutating-Method"},{"inlineContent":[{"text":"Mutating methods can assign an entirely new instance to the implicit ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Point","type":"codeVoice"},{"text":" example shown above could have been written in the following way instead:","type":"text"}],"type":"paragraph"},{"code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        self = Point(x: x + deltaX, y: y + deltaY)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This version of the mutating ","type":"text"},{"code":"moveBy(x:y:)","type":"codeVoice"},{"text":" method creates a new structure","type":"text"},{"text":" ","type":"text"},{"text":"whose ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"y","type":"codeVoice"},{"text":" values are set to the target location.","type":"text"},{"text":" ","type":"text"},{"text":"The end result of calling this alternative version of the method","type":"text"},{"text":" ","type":"text"},{"text":"will be exactly the same as for calling the earlier version.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Mutating methods for enumerations can set the implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" parameter to be"},{"type":"text","text":" "},{"type":"text","text":"a different case from the same enumeration:"}],"type":"paragraph"},{"code":["enum TriStateSwitch {","    case off, low, high","    mutating func next() {","        switch self {","        case .off:","            self = .low","        case .low:","            self = .high","        case .high:","            self = .off","        }","    }","}","var ovenLight = TriStateSwitch.low","ovenLight.next()","\/\/ ovenLight is now equal to .high","ovenLight.next()","\/\/ ovenLight is now equal to .off"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This example defines an enumeration for a three-state switch."},{"type":"text","text":" "},{"type":"text","text":"The switch cycles between three different power states"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"off","type":"codeVoice"},{"type":"text","text":", "},{"code":"low","type":"codeVoice"},{"type":"text","text":" and "},{"code":"high","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"every time its "},{"code":"next()","type":"codeVoice"},{"type":"text","text":" method is called."}],"type":"paragraph"},{"level":2,"text":"Type Methods","type":"heading","anchor":"Type-Methods"},{"inlineContent":[{"text":"Instance methods, as described above,","type":"text"},{"text":" ","type":"text"},{"text":"are methods that you call on an instance of a particular type.","type":"text"},{"text":" ","type":"text"},{"text":"You can also define methods that are called on the type itself.","type":"text"},{"text":" ","type":"text"},{"text":"These kinds of methods are called ","type":"text"},{"inlineContent":[{"type":"text","text":"type methods"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You indicate type methods by writing","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword before the method’s ","type":"text"},{"code":"func","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"Classes can use the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword instead,","type":"text"},{"text":" ","type":"text"},{"text":"to allow subclasses to override the superclass’s implementation of that method.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"In Objective-C, you can define type-level methods only for Objective-C classes."},{"text":" ","type":"text"},{"text":"In Swift, you can define type-level methods for all classes, structures, and enumerations.","type":"text"},{"text":" ","type":"text"},{"text":"Each type method is explicitly scoped to the type it supports.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Type methods are called with dot syntax, like instance methods."},{"type":"text","text":" "},{"type":"text","text":"However, you call type methods on the type, not on an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"Here’s how you call a type method on a class called "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["class SomeClass {","    class func someTypeMethod() {","        \/\/ type method implementation goes here","    }","}","SomeClass.someTypeMethod()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Within the body of a type method,"},{"type":"text","text":" "},{"type":"text","text":"the implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property refers to the type itself,"},{"type":"text","text":" "},{"type":"text","text":"rather than an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"This means that you can use "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to disambiguate between"},{"type":"text","text":" "},{"type":"text","text":"type properties and type method parameters,"},{"type":"text","text":" "},{"type":"text","text":"just as you do for instance properties and instance method parameters."}],"type":"paragraph"},{"inlineContent":[{"text":"More generally, any unqualified method and property names that you use","type":"text"},{"text":" ","type":"text"},{"text":"within the body of a type method will refer to other type-level methods and properties.","type":"text"},{"text":" ","type":"text"},{"text":"A type method can call another type method with the other method’s name,","type":"text"},{"text":" ","type":"text"},{"text":"without needing to prefix it with the type name.","type":"text"},{"text":" ","type":"text"},{"text":"Similarly, type methods on structures and enumerations can access type properties","type":"text"},{"text":" ","type":"text"},{"text":"by using the type property’s name without a type name prefix.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which tracks a player’s progress through the different levels or stages of a game.","type":"text"},{"text":" ","type":"text"},{"text":"It’s a single-player game,","type":"text"},{"text":" ","type":"text"},{"text":"but can store information for multiple players on a single device.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the game’s levels (apart from level one) are locked when the game is first played."},{"type":"text","text":" "},{"type":"text","text":"Every time a player finishes a level,"},{"type":"text","text":" "},{"type":"text","text":"that level is unlocked for all players on the device."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" structure uses type properties and methods"},{"type":"text","text":" "},{"type":"text","text":"to keep track of which levels of the game have been unlocked."},{"type":"text","text":" "},{"type":"text","text":"It also tracks the current level for an individual player."}]},{"syntax":"swift","type":"codeListing","code":["struct LevelTracker {","    static var highestUnlockedLevel = 1","    var currentLevel = 1","","    static func unlock(_ level: Int) {","        if level > highestUnlockedLevel { highestUnlockedLevel = level }","    }","","    static func isUnlocked(_ level: Int) -> Bool {","        return level <= highestUnlockedLevel","    }","","    @discardableResult","    mutating func advance(to level: Int) -> Bool {","        if LevelTracker.isUnlocked(level) {","            currentLevel = level","            return true","        } else {","            return false","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" structure keeps track of the highest level that any player has unlocked."},{"type":"text","text":" "},{"type":"text","text":"This value is stored in a type property called "},{"code":"highestUnlockedLevel","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" also defines two type functions to work with"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The first is a type function called "},{"type":"codeVoice","code":"unlock(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which updates the value of "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" whenever a new level is unlocked."},{"type":"text","text":" "},{"type":"text","text":"The second is a convenience type function called "},{"type":"codeVoice","code":"isUnlocked(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if a particular level number is already unlocked."},{"type":"text","text":" "},{"type":"text","text":"(Note that these type methods can access the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" type property"},{"type":"text","text":" "},{"type":"text","text":"without your needing to write it as "},{"type":"codeVoice","code":"LevelTracker.highestUnlockedLevel"},{"type":"text","text":".)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to its type property and type methods,"},{"type":"text","text":" "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" tracks an individual player’s progress through the game."},{"type":"text","text":" "},{"type":"text","text":"It uses an instance property called "},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":" to track"},{"type":"text","text":" "},{"type":"text","text":"the level that a player is currently playing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help manage the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" defines an instance method called "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Before updating "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this method checks whether the requested new level is already unlocked."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"advance(to:)","type":"codeVoice"},{"type":"text","text":" method returns a Boolean value to indicate"},{"type":"text","text":" "},{"type":"text","text":"whether or not it was actually able to set "},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because it’s not necessarily a mistake for"},{"type":"text","text":" "},{"type":"text","text":"code that calls the "},{"code":"advance(to:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to ignore the return value,"},{"type":"text","text":" "},{"type":"text","text":"this function is marked with the "},{"code":"@discardableResult","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"For more information about this attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" structure is used with the "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class, shown below,"},{"text":" ","type":"text"},{"text":"to track and update the progress of an individual player:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Player {","    var tracker = LevelTracker()","    let playerName: String","    func complete(level: Int) {","        LevelTracker.unlock(level + 1)","        tracker.advance(to: level + 1)","    }","    init(name: String) {","        playerName = name","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" class creates a new instance of ","type":"text"},{"type":"codeVoice","code":"LevelTracker"},{"text":" ","type":"text"},{"text":"to track that player’s progress.","type":"text"},{"text":" ","type":"text"},{"text":"It also provides a method called ","type":"text"},{"type":"codeVoice","code":"complete(level:)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is called whenever a player completes a particular level.","type":"text"},{"text":" ","type":"text"},{"text":"This method unlocks the next level for all players","type":"text"},{"text":" ","type":"text"},{"text":"and updates the player’s progress to move them to the next level.","type":"text"},{"text":" ","type":"text"},{"text":"(The Boolean return value of ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"text":" is ignored,","type":"text"},{"text":" ","type":"text"},{"text":"because the level is known to have been unlocked","type":"text"},{"text":" ","type":"text"},{"text":"by the call to ","type":"text"},{"type":"codeVoice","code":"LevelTracker.unlock(_:)"},{"text":" on the previous line.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can create an instance of the ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" class for a new player,","type":"text"},{"text":" ","type":"text"},{"text":"and see what happens when the player completes level one:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var player = Player(name: \"Argyrios\")","player.complete(level: 1)","print(\"highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)\")","\/\/ Prints \"highest unlocked level is now 2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a second player, whom you try to move to a level"},{"type":"text","text":" "},{"type":"text","text":"that’s not yet unlocked by any player in the game,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the player’s current level fails:"}]},{"type":"codeListing","syntax":"swift","code":["player = Player(name: \"Beto\")","if player.tracker.advance(to: 6) {","    print(\"player is now on level 6\")","} else {","    print(\"level 6 hasn't yet been unlocked\")","}","\/\/ Prints \"level 6 hasn't yet been unlocked\""]},{"name":"Beta Software","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Learn more about using ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"topic","role":"article","kind":"article","title":"Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","title":"The Swift Programming Language (6.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"abstract":[{"text":"Define and call functions, label their arguments, and use their return values.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/functions","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","title":"Functions","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Argument-Labels-and-Parameter-Names":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names","title":"Function Argument Labels and Parameter Names","url":"\/documentation\/the-swift-programming-language\/functions#Function-Argument-Labels-and-Parameter-Names","kind":"section","abstract":[],"type":"topic"},"https://developer.apple.com/support/beta-software/":{"titleInlineContent":[{"type":"text","text":"Apple’s beta software"}],"url":"https:\/\/developer.apple.com\/support\/beta-software\/","type":"link","title":"Apple’s beta software","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Stored-Properties-of-Constant-Structure-Instances":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/properties#Stored-Properties-of-Constant-Structure-Instances","type":"topic","title":"Stored Properties of Constant Structure Instances","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances"}}}